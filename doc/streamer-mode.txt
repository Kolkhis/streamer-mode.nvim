==============================================================================
				STREAMER MODE 
							   *streamer-mode.nvim*


by Kolkhis           


Intro 
 
    streamer-mode.nvim is plugin that will hide your environment variables,
 SSH keys, sensitive Git config information, and anything else you want to
 hide from your stream.


==============================================================================
				    SETUP
							*streamer-mode.setup()*
								    *sm.setup*
streamer-mode.setup({opts})                         
    Setup function for the user to run. Configures the behavior of 
    `streamer-mode.nvim`.

    Usage: ~
    >lua
    Defaults can be used by calling like:
    
        require('streamer-mode').setup({ preset = true })

    To set up a custom config:
    require('streamer-mode').setup{
        keywords = {
          'api_key',
          'token',
          'client_secret',
          'powershell',
          '$env:',
          'export',
          'alias',
          'name',
          'userpassword',
          'username',
          'user.name',
          'user.password',
          'user.email',
          'email',
          'signingkey',
          'IdentityFile',
          'server',
          'host',
          'port',
          'credential.helper',
        },
	paths = {
        -- name = '*/path/*',
        -- Default:
	    venv = '*/venv/*',
	    virtualenv = '*/virtualenv/*',
	    dotenv = '*/.env',
	    config = '*/.config/*',
	    aliases = '*/.bash_aliases',
	    dotfiles = '*/dotfiles/*',
	    powershell = '*.ps1',
	    gitconfig = '*/.gitconfig',
	    configini = '*/*.ini',
	    yaml_secrets = '*/*.yaml',
	-- Use any name, only the paths will be used.
      },


      level = 'secure', -- | 'edit' | 'soft' (see more info below)

      default_state = 'off',  -- | 'on' : Whether or not streamer mode turns
                             --           on when nvim is launched.

      conceal_char = '*'  -- Default. This is what will be displayed instead
			  -- of your secrets.

    })
<

The `paths` listed in the example are on by default. Disable them by 
passing your own paths to the |sm.setup()| function:
    >lua

    require('streamer-mode').setup({
      use_defaults = true,
      -- Add your own paths and filetypes for Streamer Mode to be enabled in.  
      paths = {
	'*/*.yaml',  -- Enables Streamer Mode for all YAML files.
	'*/.bash*',  -- Enables Streamer Mode for all Bash configuration files.
	'~/',        -- Enables Streamer Mode for all files in your home directory.
      },
    })  
<

The |keywords| listed above are active by default. More can be added by 
calling the |sm.setup()| function.

Level will determine if, and how, the hidden text will be displayed in
your buffer. See |stremer-mode.level|

==============================================================================
				   KEYWORDS
						    *keywords* | *sm.keywords*


The `keywords` variable is a table of the words that will be 
followed by concealed text. E.g., if `'alias'` is among the
keywords, everything that comes after the word `alias` will
be concealed with |conceal_char|: `alias*`
	
    The default |keywords| are: 
    >lua
    keywords = { 
	'api_key',
	'token',
	'client_secret',
	'powershell',
	'$env:',
	'export',
	'alias',
	'name',
	'userpassword',
	'email',
	'signingkey',
	'IdentityFile',
	'server',
	'username',
	'host',
	'port',
	'hostname',
    } 
<
To add more keywords, call the |sm.setup()| function and pass
in a list-like table of strings like above.



==============================================================================
				    LEVELS
							 *streamer-mode.levels*
								    *sm.levels*
• Levels:
							*sm.secure* | *secure*
    • `'secure'` will prevent the concealed text from becoming
	visible at all. This will also conceal any keywords while 
	typing them (like sudo password input).

							    *sm.edit* | *edit*
    • `'edit'` will allow the concealed text to become visible
      only when the cursor goes into insert mode on the same line.

							    *sm.soft* | *soft*
    • `'soft'` will allow the concealed text to become visible
      when the cursor is on the same line in any mode.



==============================================================================
				   COMMANDS
						       *streamer-mode.command*
								  *sm.command*


	     There are five commands available for Streamer Mode.
		 Each command has an alias for easier typing.
	 The new mode will go into effect once the command is called.


						       *:StreamerMode* | *:SM*

    • `:StreamerMode` (or `:SM`) - Toggles Streamer Mode on and off.



						 *:StreamerModeOff* | *:SMoff*
    • `:StreamerModeOff` (or `:SMoff`) - Shuts off Streamer Mode.



					   *:StreamerModeSecure* | *:SMsecure*
    • `:StreamerModeSecure` (or `:SMsecure`) - Starts Streamer Mode
					       in `'secure'` mode.



					       *:StreamerModeEdit* | *:SMedit*
    • `:StreamerModeEdit` (or `:SMedit`) - Starts Streamer Mode in `'edit'` mode.




					       *:StreamerModeSoft* | *:SMsoft*
    • `:StreamerModeSoft` (or `:SMsoft`) - Starts Streamer Mode in `'soft'` mode.




==============================================================================
			      CONCEAL CHARACTER		


					    *conceal_char* | *sm.conceal_char*

	 This is the character that will show up instead of your secrets.
	 You can set a custom conceal character by passing the `conceal_char`
	 argument to |.setup()|



==============================================================================
				DEFAULT STATE


					  *default_state* | *sm.default_state*

	This option can be set to either `'on'` or `'off'`, passed into the
	|setup()| function. 

	`'on'` will start Streamer Mode when Neovim is launched.

	`'off'` will not launch Streamer Mode when Neovim is launched, if this
	option is set, you need to run `:SM` or `:SM(level)` to start 
	Stremer Mode.



==============================================================================
				    PATHS

							  *paths* | *sm.paths*

	Passed into |setup()|, these are the paths that Streamer Mode will
	be applied to. 
	These can be filepaths, filetypes, or just files, in the format:

	`paths = { '*/.bash*', '~/.config/*' }`

	Supports the `'*'` wildcard.
	It is possible to set `paths = { '*' }` to enable 
	Streamer Mode in all files.

	For example if I open `~/.bashrc`, and I haven't specified
	the path `'~/'` or `'*/.bash*'` in `paths`, then
	Streamer Mode will not hide any data in that file.



vim:tw=78:ts=8:noet:ft=help:norl:
